{
	"info": {
		"_postman_id": "f0417adc-97d4-472f-bd42-f5334d2f55ad",
		"name": "Deck of Cards",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30397604",
		"_collection_link": "https://bold-trinity-765655.postman.co/workspace/qa~14941ec5-49c6-431c-ac44-702d218718af/collection/30397604-f0417adc-97d4-472f-bd42-f5334d2f55ad?action=share&source=collection_link&creator=30397604"
	},
	"item": [
		{
			"name": "SHUFFLE CARDS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Save deck_id to Environment\",function(){\r",
							"let responseBody=pm.response.json();\r",
							"\r",
							"let deck_id=responseBody.deck_id\r",
							"pm.environment.set(\"deck_id\",deck_id)\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has 'total' number\", function () {\r",
							"    pm.expect(pm.response.json())\r",
							"        .to.have.property('remaining')\r",
							"        .that.is.an('number');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}new/shuffle/?deck_count=1",
					"host": [
						"{{baseUrl}}new"
					],
					"path": [
						"shuffle",
						""
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "deck_count",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DRAW A CARD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has 'cards' array\", function () {\r",
							"    pm.expect(pm.response.json())\r",
							"        .to.have.property('cards')\r",
							"        .that.is.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Save cards to Environment\",function(){\r",
							"let responseBody=pm.response.json();\r",
							"\r",
							"let cards=responseBody.cards[0].code\r",
							"pm.environment.set(\"cards\",cards)\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}{{deck_id}}/draw/?count=1",
					"host": [
						"{{baseUrl}}{{deck_id}}"
					],
					"path": [
						"draw",
						""
					],
					"query": [
						{
							"key": "count",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "RESHUFFLE REMAINING CARDS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has 'cards' array\", function () {\r",
							"    pm.expect(pm.response.json())\r",
							"        .to.have.property('cards')\r",
							"        .that.is.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Save cards to Environment\",function(){\r",
							"let responseBody=pm.response.json();\r",
							"\r",
							"let cards=responseBody.cards[0].code\r",
							"pm.environment.set(\"cards\",cards)\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Success field is present and has a boolean value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('success').that.is.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}{{deck_id}}/shuffle/?remaining=true",
					"host": [
						"{{baseUrl}}{{deck_id}}"
					],
					"path": [
						"shuffle",
						""
					],
					"query": [
						{
							"key": "remaining",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "RETURN A CARD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response has content type application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Deck_id in the response is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.deck_id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Deck_id should be a non-empty string\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}{{deck_id}}/return/?cards={{cards}}",
					"host": [
						"{{baseUrl}}{{deck_id}}"
					],
					"path": [
						"return",
						""
					],
					"query": [
						{
							"key": "cards",
							"value": "{{cards}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NEW DECK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Remaining is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.remaining).to.be.a('number');\r",
							"  pm.expect(responseData.remaining).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Shuffled property must be a boolean value\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.shuffled).to.be.a('boolean');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/new/?jokers_enabled=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"new",
						""
					],
					"query": [
						{
							"key": "jokers_enabled",
							"value": "true"
						}
					]
				}
			},
			"response": []
		}
	]
}